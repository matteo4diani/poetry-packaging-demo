name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  Quality:
    runs-on: ubuntu-latest
    strategy:
        fail-fast: true
        matrix:
          python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.python-version}}

    - name: Install Python Poetry
      uses: abatilo/actions-poetry@v2.3.0

    - name: Configure poetry
      shell: bash
      run: python -m poetry config virtualenvs.in-project true

    - name: View poetry version
      run: poetry --version

    - name: Install dependencies
      run: |
        python -m poetry install

    - name: Test
      run: poetry run python3 -m unittest discover
    
  Release:
    needs: Quality
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      !contains ( github.event.head_commit.message, 'chore(release)' )
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check release status
        id: release-status
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install python-semantic-release
          if semantic-release --noop --strict version ; then
            echo "should_release=true" >> $env:GITHUB_OUTPUT
          else
            echo "should_release=false" >> $env:GITHUB_OUTPUT
          fi

      - name: Context for steps
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"

      - if: steps.release-status.outputs.released == 'true'
        name: Release to GitHub
        id: github-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release version
          git fetch --tags
          for file in ./dist/**; do gh release upload "$(git describe --abbrev=0)" $file; done
      
      - if: steps.release-status.outputs.released == 'true'
        name: Release to PyPI
        id: pypi-release
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish